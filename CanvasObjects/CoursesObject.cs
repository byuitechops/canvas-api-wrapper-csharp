// Generated by https://quicktype.io

// the canvas Courses object that has room for all the options enabled

namespace CanvasAPIWrapper
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CoursesObject
    {
        [JsonProperty("id")]
        public long? Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("account_id")]
        public long? AccountId { get; set; }

        [JsonProperty("uuid")]
        public string Uuid { get; set; }

        [JsonProperty("start_at")]
        public DateTimeOffset? StartAt { get; set; }

        [JsonProperty("grading_standard_id")]
        public long? GradingStandardId { get; set; }

        [JsonProperty("is_public")]
        public bool? IsPublic { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("syllabus_body")]
        public string SyllabusBody { get; set; }

        [JsonProperty("course_code")]
        public string CourseCode { get; set; }

        [JsonProperty("default_view")]
        public string DefaultView { get; set; }

        [JsonProperty("root_account_id")]
        public long? RootAccountId { get; set; }

        [JsonProperty("enrollment_term_id")]
        public long? EnrollmentTermId { get; set; }

        [JsonProperty("license")]
        public string License { get; set; }

        [JsonProperty("end_at")]
        public object EndAt { get; set; }

        [JsonProperty("public_syllabus")]
        public bool? PublicSyllabus { get; set; }

        [JsonProperty("public_syllabus_to_auth")]
        public bool? PublicSyllabusToAuth { get; set; }

        [JsonProperty("storage_quota_mb")]
        public long? StorageQuotaMb { get; set; }

        [JsonProperty("is_public_to_auth_users")]
        public bool? IsPublicToAuthUsers { get; set; }

        [JsonProperty("hide_final_grades")]
        public bool? HideFinalGrades { get; set; }

        [JsonProperty("storage_quota_used_mb")]
        public long? StorageQuotaUsedMb { get; set; }

        [JsonProperty("permissions")]
        public Permissions Permissions { get; set; }

        [JsonProperty("term")]
        public Term Term { get; set; }

        [JsonProperty("course_progress")]
        public CourseProgress CourseProgress { get; set; }

        [JsonProperty("apply_assignment_group_weights")]
        public bool? ApplyAssignmentGroupWeights { get; set; }

        [JsonProperty("sections")]
        public object[] Sections { get; set; }

        [JsonProperty("total_students")]
        public long? TotalStudents { get; set; }

        [JsonProperty("passback_status")]
        public object PassbackStatus { get; set; }

        [JsonProperty("is_favorite")]
        public bool? IsFavorite { get; set; }

        [JsonProperty("teachers")]
        public Teacher[] Teachers { get; set; }

        [JsonProperty("locale")]
        public string Locale { get; set; }

        [JsonProperty("account")]
        public Account Account { get; set; }

        [JsonProperty("calendar")]
        public Calendar Calendar { get; set; }

        [JsonProperty("time_zone")]
        public string TimeZone { get; set; }

        [JsonProperty("image_download_url")]
        public Uri ImageDownloadUrl { get; set; }

        [JsonProperty("concluded")]
        public bool? Concluded { get; set; }

        [JsonProperty("blueprint")]
        public bool? Blueprint { get; set; }

        [JsonProperty("sis_course_id")]
        public string SisCourseId { get; set; }

        [JsonProperty("integration_id")]
        public object IntegrationId { get; set; }

        [JsonProperty("enrollments")]
        public object[] Enrollments { get; set; }

        [JsonProperty("workflow_state")]
        public string WorkflowState { get; set; }

        [JsonProperty("restrict_enrollments_to_course_dates")]
        public bool? RestrictEnrollmentsToCourseDates { get; set; }

        [JsonProperty("overridden_course_visibility")]
        public string OverriddenCourseVisibility { get; set; }

        [JsonProperty("has_grading_periods")]
        public bool? HasGradingPeriods { get; set; }

        [JsonProperty("multiple_grading_periods_enabled")]
        public bool? MultipleGradingPeriodsEnabled { get; set; }

        [JsonProperty("has_weighted_grading_periods")]
        public bool? HasWeightedGradingPeriods { get; set; }
    }

    public partial class Account
    {
        [JsonProperty("id")]
        public long? Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("workflow_state")]
        public string WorkflowState { get; set; }

        [JsonProperty("parent_account_id")]
        public long? ParentAccountId { get; set; }

        [JsonProperty("root_account_id")]
        public long? RootAccountId { get; set; }

        [JsonProperty("uuid")]
        public string Uuid { get; set; }

        [JsonProperty("default_storage_quota_mb")]
        public long? DefaultStorageQuotaMb { get; set; }

        [JsonProperty("default_user_storage_quota_mb")]
        public long? DefaultUserStorageQuotaMb { get; set; }

        [JsonProperty("default_group_storage_quota_mb")]
        public long? DefaultGroupStorageQuotaMb { get; set; }

        [JsonProperty("default_time_zone")]
        public string DefaultTimeZone { get; set; }

        [JsonProperty("sis_account_id")]
        public string SisAccountId { get; set; }

        [JsonProperty("integration_id")]
        public object IntegrationId { get; set; }
    }

    public partial class Calendar
    {
        [JsonProperty("ics")]
        public Uri Ics { get; set; }
    }

    public partial class CourseProgress
    {
        [JsonProperty("error")]
        public Error Error { get; set; }

        [JsonProperty("requirement_count")]
        public int? RequirementCount { get; set; }

        [JsonProperty("requirement_completed_count")]
        public int? RequirementCompletedCount { get; set; }

        [JsonProperty("next_requirement_url")]
        public string NextRequirementUrl { get; set; }

        [JsonProperty("completed_at")]
        public DateTimeOffset? CompletedAt { get; set; }
    }

    public partial class Error
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class Permissions
    {
        [JsonProperty("create_discussion_topic")]
        public bool? CreateDiscussionTopic { get; set; }

        [JsonProperty("create_announcement")]
        public bool? CreateAnnouncement { get; set; }
    }

    public partial class Teacher
    {
        [JsonProperty("id")]
        public long? Id { get; set; }

        [JsonProperty("display_name")]
        public string DisplayName { get; set; }

        [JsonProperty("avatar_image_url")]
        public Uri AvatarImageUrl { get; set; }

        [JsonProperty("html_url")]
        public Uri HtmlUrl { get; set; }
    }

    public partial class Term
    {
        [JsonProperty("id")]
        public long? Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("start_at")]
        public DateTimeOffset? StartAt { get; set; }

        [JsonProperty("end_at")]
        public DateTimeOffset? EndAt { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("workflow_state")]
        public string WorkflowState { get; set; }

        [JsonProperty("grading_period_group_id")]
        public object GradingPeriodGroupId { get; set; }

        [JsonProperty("sis_term_id")]
        public string SisTermId { get; set; }
    }

    public class CoursesParametersObject
    {
        public class Include
        {
            public bool needs_grading_count;
            public bool syllabus_body;
            public bool public_description;
            public bool total_scores;
            public bool current_grading_period_scores;
            public bool term;
            public bool account;
            public bool course_progress;
            public bool sections;
            public bool storage_quota_used_mb;
            public bool total_students;
            public bool passback_status;
            public bool favorites;
            public bool teachers;
            public bool observed_users;
            public bool all_courses;
            public bool permissions;
            public bool course_image;
            public bool concluded;

            public Include()
            {
                needs_grading_count = false;
                syllabus_body = false;
                public_description = false;
                total_scores = false;
                current_grading_period_scores = false;
                term = false;
                account = false;
                course_progress = false;
                sections = false;
                storage_quota_used_mb = false;
                total_students = false;
                passback_status = false;
                favorites = false;
                teachers = false;
                observed_users = false;
                all_courses = false;
                permissions = false;
                course_image = false;
                concluded = false;
            }
        }

        public Include include;
        public uint teacher_limit;

        public CoursesParametersObject()
        {
            include = new Include();
            teacher_limit = 0;
        }

        private string AddParameter(string parameterList, string newParameter)
        {
            if (parameterList.Length > 0) parameterList += "&";
            else parameterList += "?";

            parameterList += newParameter;
            return parameterList;
        }

        public string GetParameterString() 
        { 
            string parameters = "";
            if (include.needs_grading_count) parameters = AddParameter(parameters, "include[]=needs_grading_count");
            if (include.syllabus_body) parameters = AddParameter(parameters, "include[]=syllabus_body");
            if (include.public_description) parameters = AddParameter(parameters, "include[]=public_description");
            if (include.total_scores) parameters = AddParameter(parameters, "include[]=total_scores");
            if (include.current_grading_period_scores) parameters = AddParameter(parameters, "include[]=current_grading_period_scores");
            if (include.term) parameters = AddParameter(parameters, "include[]=term");
            if (include.account) parameters = AddParameter(parameters, "include[]=account");
            if (include.course_progress) parameters = AddParameter(parameters, "include[]=course_progress");
            if (include.sections) parameters = AddParameter(parameters, "include[]=sections");
            if (include.storage_quota_used_mb) parameters = AddParameter(parameters, "include[]=storage_quota_used_mb");
            if (include.total_students) parameters = AddParameter(parameters, "include[]=total_students");
            if (include.passback_status) parameters = AddParameter(parameters, "include[]=passback_status");
            if (include.favorites) parameters = AddParameter(parameters, "include[]=favorites");
            if (include.teachers) parameters = AddParameter(parameters, "include[]=teachers");
            if (include.observed_users) parameters = AddParameter(parameters, "include[]=observed_users");
            if (include.all_courses) parameters = AddParameter(parameters, "include[]=all_courses");
            if (include.permissions) parameters = AddParameter(parameters, "include[]=permissions");
            if (include.course_image) parameters = AddParameter(parameters, "include[]=course_image");
            if (include.concluded) parameters = AddParameter(parameters, "include[]=concluded");
            if (teacher_limit > 0) parameters = AddParameter(parameters, "teacher_limit=" + teacher_limit.ToString());
            return parameters; 
        }
    }
}